"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.warning=exports.success=exports.info=exports.error=exports.toast=exports.Melba=void 0;const EventEmitter_1=require("@dom111/typed-event-emitter/EventEmitter");const supportsFocusWithin_1=require("./lib/supportsFocusWithin");class Melba extends EventEmitter_1.default{constructor(content,{animation:animation=Melba.defaults.animation,animationDuration:animationDuration=Melba.defaults.animationDuration,closeLabel:closeLabel=Melba.defaults.closeLabel,container:container=null,containerClass:containerClass=Melba.defaults.containerClass,containerElement:containerElement=Melba.defaults.containerElement,events:events={},hide:hide=Melba.defaults.hide,root:root=Melba.defaults.root,toastClass:toastClass=Melba.defaults.toastClass,toastElement:toastElement=Melba.defaults.toastElement,toastHideClass:toastHideClass=Melba.defaults.toastHideClass,toastShowClass:toastShowClass=Melba.defaults.toastShowClass,type:type=Melba.defaults.type}){super();if(!content){throw new TypeError("'content' cannot be empty.")}this.animation=animation;this.events=events;this.toastHideClass=toastHideClass;this.toastShowClass=toastShowClass;if(!container){container=this.getContainer({containerClass:containerClass,containerElement:containerElement,root:root})}this.container=container;if(hide===true){hide=Melba.defaults.hideDelay}if(hide!==false&&hide<100){hide*=1e3}this.hideDelay=hide;if(animationDuration<100){animationDuration*=1e3}this.build({closeLabel:closeLabel,content:content,toastClass:toastClass,toastElement:toastElement,type:type});if(this.hideDelay!==false){this.autoHide(animationDuration)}if(this.animation){window.requestAnimationFrame((()=>this.show()));return}if(this.autoShow){this.show()}}autoHide(animationDuration){if(!this.hideDelay){return}return window.setTimeout((()=>this.hide()),this.hideDelay+(this.animation?animationDuration:0))}build({closeLabel:closeLabel,content:content,toastClass:toastClass,toastElement:toastElement,type:type}){this.element=document.createElement(toastElement);this.element.setAttribute("title",content);this.element.setAttribute("role","status");this.element.setAttribute("tabindex","0");this.element.classList.add(toastClass);this.element.classList.add(`toast--${type}`);this.element.appendChild(this.buildClose(closeLabel));this.element.appendChild(document.createTextNode(content));this.element.addEventListener("keydown",(event=>{if(event.key==="Escape"){event.preventDefault();this.hide()}}));this.container.appendChild(this.element);this.emit("build")}show(){this.element.classList.remove(this.toastHideClass);this.element.classList.add(this.toastShowClass);this.emit("show")}hide(force=false){if(!force&&this.hasFocus){return}const focusSelector=(supportsFocusWithin_1.default?":focus-within, ":"")+":focus, :hover";if(!force&&this.element.matches(focusSelector)){this.element.addEventListener("mouseout",(()=>{this.hasFocus=false;if(this.hideDelay>0){this.hide()}}))}this.element.classList.remove(this.toastShowClass);this.element.classList.add(this.toastHideClass);this.emit("hide");if(this.animation){const transitionEndHandler=()=>this.remove(),transitionStartHandler=()=>{if(bound){return}this.element.addEventListener("transitionend",(()=>transitionEndHandler()));bound=true},mouseOverHandler=()=>{this.show();this.element.removeEventListener("transitionstart",(()=>transitionStartHandler()));this.element.removeEventListener("transitionend",(()=>transitionEndHandler()));this.element.removeEventListener("mouseover",(()=>mouseOverHandler()));this.element.addEventListener("mouseout",(()=>this.hide()))};let bound=false;this.element.addEventListener("mouseover",(()=>mouseOverHandler()));this.element.addEventListener("transitionstart",(()=>transitionStartHandler()));return}this.remove()}remove(){if(this.element.parentNode===this.container){this.container.removeChild(this.element);this.emit("remove")}}buildClose(closeLabel){const closeButton=document.createElement("button");closeButton.setAttribute("title",closeLabel);closeButton.appendChild(document.createTextNode(closeLabel));closeButton.addEventListener("click",(()=>this.hide()));return closeButton}getContainer({containerClass:containerClass,containerElement:containerElement,root:root}){const existingContainer=root.querySelector(`${containerElement}.${containerClass}`);if(existingContainer){return existingContainer}const container=document.createElement(containerElement);container.classList.add(containerClass);root.appendChild(container);return container}getElement(){return this.element}static settings(settings){Melba.defaults=Object.assign(Object.assign({},Melba.defaults),settings)}}exports.Melba=Melba;Melba.defaults={animation:true,animationDuration:400,autoShow:true,closeLabel:"Close",containerClass:"toast__container",containerElement:"div",hide:false,hideDelay:5,root:document.body,toastClass:"toast",toastElement:"div",toastHideClass:"toast--hide",toastShowClass:"toast--show",type:"info"};const toast=(content,options={})=>new Melba(content,Object.assign(Object.assign({},options),{autoShow:true}));exports.toast=toast;const error=(content,options={})=>(0,exports.toast)(content,Object.assign(Object.assign({},options),{type:"error"}));exports.error=error;const info=(content,options={})=>(0,exports.toast)(content,Object.assign(Object.assign({},options),{type:"info"}));exports.info=info;const success=(content,options={})=>(0,exports.toast)(content,Object.assign(Object.assign({},options),{type:"success",hide:true}));exports.success=success;const warning=(content,options={})=>(0,exports.toast)(content,Object.assign(Object.assign({},options),{type:"warning"}));exports.warning=warning;exports.default=Melba;