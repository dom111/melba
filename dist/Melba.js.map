{
  "version": 3,
  "sources": ["../src/Melba.ts", "../node_modules/@dom111/typed-event-emitter/EventEmitter.ts", "../src/lib/supportsFocusWithin.ts"],
  "sourcesContent": ["/**\n * Melba - lightweight, accessible, VanillaJS toast library.\n */\nimport EventEmitter from '@dom111/typed-event-emitter/EventEmitter';\nimport supportsFocusWithin from \"./lib/supportsFocusWithin\";\n\ntype MelbaEventMap = {\n  build: [];\n  hide: [];\n  remove: [];\n  show: [];\n};\ntype MelbaEventHandler<K extends keyof MelbaEventMap> = (\n  ...args: MelbaEventMap[K]\n) => void;\ntype MelbaEventContainer = {\n  [K in keyof MelbaEventMap]?: MelbaEventHandler<K>[];\n};\ntype MelbaConstructorOptions = MelbaOptions & {\n  container?: HTMLElement | null;\n  events?: MelbaEventContainer;\n  type?: MelbaType;\n};\n\ntype MelbaType = 'error' | 'info' | 'success' | 'warning';\n\nexport type MelbaOptions = {\n  animation?: boolean;\n  animationDuration?: number;\n  autoShow?: boolean;\n  containerClass?: string;\n  containerElement?: string;\n  closeLabel?: string;\n  hide?: boolean | number;\n  hideDelay?: number;\n  root?: HTMLElement | null;\n  toastClass?: string;\n  toastElement?: string;\n  toastHideClass?: string;\n  toastShowClass?: string;\n  type?: MelbaType;\n};\n\nexport class Melba extends EventEmitter<MelbaEventMap> {\n  /**\n   * #defaults\n   *\n   * The library's default parameters:\n   *\n   * - `animation` - Whether or not the element is animated with CSS.\n   * - `animationDuration` - The duration of the CSS animation.\n   * - `autoShow` - If the toast should be automatically shown when instantiated. Defaults to `true`.\n   * - `containerClass` - The `className` applied to the container element.\n   * - `containerElement` - The element type used for the container.\n   * - `closeLabel` - The text label for the close button.\n   * - `hide` - Controls auto-hide behaviour. `false` disables by default, a number controls the time before auto-hiding\n   *     and `true` will auto-hide after a delay of `hideDelay`.\n   * - `hideDelay` - The default auto-hide delay.\n   * - `root` - The root element to attach the `containerElement` to.\n   * - `toastClass` - The `className` to apply to all toasts.\n   * - `toastElement` - The element type used for toasts.\n   * - `toastEvents` - The DOM events to expose for toasts.\n   * - `toastHideClass` - The `className` applied to the toast to hide.\n   * - `toastShowClass` - The `className` applied to the toast to show.\n   * - `type` - The type of the toast, this will be added as a `className` like `toast--${type}`.\n   *\n   * @type {MelbaOptions}\n   */\n  private static defaults: MelbaOptions = {\n    animation: true,\n    animationDuration: 400,\n    autoShow: true,\n    closeLabel: 'Close', // TODO: i18n\n    containerClass: 'toast__container',\n    containerElement: 'div',\n    hide: false,\n    hideDelay: 5,\n    root: document.body,\n    toastClass: 'toast',\n    toastElement: 'div',\n    toastHideClass: 'toast--hide',\n    toastShowClass: 'toast--show',\n    type: 'info',\n  };\n\n  private animation: boolean;\n  private autoShow: boolean;\n  private container: HTMLElement;\n  private element: HTMLElement;\n  private events: MelbaEventContainer;\n  private hasFocus: boolean;\n  private hideDelay: false | number;\n  private toastHideClass: string;\n  private toastShowClass: string;\n\n  /**\n   * @param animation {boolean} Optional. Used to override the `defaults`.\n   * @param animationDuration {number} Optional. Used to override the `defaults`.\n   * @param closeLabel {string} Optional. Used to override the `defaults`.\n   * @param container {?HTMLElement} Optional. Specify the container element.\n   * @param containerClass {string} Optional. Used to override the `defaults`.\n   * @param containerElement {string} Optional. Used to override the `defaults`.\n   * @param content {string} Required. The content to show in the toast.\n   * @param events {MelbaEventContainer}. An object that contains event reference keys (see calls to `events()`) which\n   *   contain arrays of callables.\n   * @param hide {boolean | number} Optional. Used to override the `defaults`.\n   * @param root {HTMLElement} Optional. Used to override the `defaults`.\n   * @param toastClass {string} Optional. Used to override the `defaults`.\n   * @param toastElement {string} Optional. Used to override the `defaults`.\n   * @param toastHideClass {string} Optional. Used to override the `defaults`.\n   * @param toastShowClass {string} Optional. Used to override the `defaults`.\n   * @param type {string} Optional. Used to override the `defaults`.\n   */\n  constructor(\n    content: string,\n    {\n      animation = Melba.defaults.animation,\n      animationDuration = Melba.defaults.animationDuration,\n      closeLabel = Melba.defaults.closeLabel,\n      container = null,\n      containerClass = Melba.defaults.containerClass,\n      containerElement = Melba.defaults.containerElement,\n      events = {},\n      hide = Melba.defaults.hide,\n      root = Melba.defaults.root,\n      toastClass = Melba.defaults.toastClass,\n      toastElement = Melba.defaults.toastElement,\n      toastHideClass = Melba.defaults.toastHideClass,\n      toastShowClass = Melba.defaults.toastShowClass,\n      type = Melba.defaults.type,\n    }: MelbaConstructorOptions\n  ) {\n    super();\n\n    if (!content) {\n      throw new TypeError(\"'content' cannot be empty.\");\n    }\n\n    this.animation = animation;\n    this.events = events;\n    this.toastHideClass = toastHideClass;\n    this.toastShowClass = toastShowClass;\n\n    if (!container) {\n      container = this.getContainer({ containerClass, containerElement, root });\n    }\n\n    this.container = container;\n\n    if (hide === true) {\n      hide = Melba.defaults.hideDelay;\n    }\n\n    // ensure we store milliseconds\n    if (hide !== false && hide < 100) {\n      hide *= 1000;\n    }\n\n    this.hideDelay = hide;\n\n    if (animationDuration < 100) {\n      animationDuration *= 1000;\n    }\n\n    this.build({\n      closeLabel,\n      content,\n      toastClass,\n      toastElement,\n      type,\n    });\n\n    if (this.hideDelay !== false) {\n      this.autoHide(animationDuration);\n    }\n\n    if (this.animation) {\n      window.requestAnimationFrame(() => this.show());\n\n      return;\n    }\n\n    if (this.autoShow) {\n      this.show();\n    }\n  }\n\n  private autoHide(animationDuration: number): number {\n    if (!this.hideDelay) {\n      return;\n    }\n\n    return window.setTimeout(\n      () => this.hide(),\n      this.hideDelay + (this.animation ? animationDuration : 0)\n    );\n  }\n\n  private build({\n    closeLabel,\n    content,\n    toastClass,\n    toastElement,\n    type,\n  }: {\n    closeLabel: string;\n    content: string;\n    toastClass: string;\n    toastElement: string;\n    type: string;\n  }): void {\n    this.element = document.createElement(toastElement);\n\n    this.element.setAttribute('title', content);\n    this.element.setAttribute('role', 'status'); // for screen readers\n    this.element.setAttribute('tabindex', '0'); // make the toast navigable via keyboard\n    this.element.classList.add(toastClass);\n    this.element.classList.add(`toast--${type}`);\n    this.element.appendChild(this.buildClose(closeLabel));\n    this.element.appendChild(document.createTextNode(content));\n\n    this.element.addEventListener('keydown', (event) => {\n      if (event.key === 'Escape') {\n        event.preventDefault();\n\n        this.hide();\n      }\n    });\n\n    this.container.appendChild(this.element);\n\n    this.emit('build');\n  }\n\n  show(): void {\n    this.element.classList.remove(this.toastHideClass);\n    this.element.classList.add(this.toastShowClass);\n\n    this.emit('show');\n  }\n\n  hide(force: boolean = false): void {\n    if (!force && this.hasFocus) {\n      return;\n    }\n\n    const focusSelector = (supportsFocusWithin ? ':focus-within, ' : '') + ':focus, :hover';\n\n    if (!force && this.element.matches(focusSelector)) {\n      this.element.addEventListener('mouseout', () => {\n        this.hasFocus = false;\n\n        if (this.hideDelay > 0) {\n          this.hide();\n        }\n      });\n    }\n\n    this.element.classList.remove(this.toastShowClass);\n    this.element.classList.add(this.toastHideClass);\n\n    this.emit('hide');\n\n    // if we're animating there's a chance that the toast could be focused whilst it's disappearing. This prevents a\n    // `:hover`ed or `:focus`ed toast from being hidden and removed.\n    if (this.animation) {\n      const transitionEndHandler = () => this.remove(),\n        transitionStartHandler = () => {\n          if (bound) {\n            return;\n          }\n\n          this.element.addEventListener('transitionend', () =>\n            transitionEndHandler()\n          );\n\n          bound = true;\n        },\n        mouseOverHandler = () => {\n          this.show();\n\n          this.element.removeEventListener('transitionstart', () =>\n            transitionStartHandler()\n          );\n          this.element.removeEventListener('transitionend', () =>\n            transitionEndHandler()\n          );\n          this.element.removeEventListener('mouseover', () =>\n            mouseOverHandler()\n          );\n          this.element.addEventListener('mouseout', () => this.hide());\n        };\n\n      let bound = false;\n\n      this.element.addEventListener('mouseover', () => mouseOverHandler());\n      this.element.addEventListener('transitionstart', () =>\n        transitionStartHandler()\n      );\n\n      return;\n    }\n\n    this.remove();\n  }\n\n  remove(): void {\n    // Safety as `remove` can end up being called multiple times\n    if (this.element.parentNode === this.container) {\n      this.container.removeChild(this.element);\n\n      this.emit('remove');\n    }\n  }\n\n  buildClose(closeLabel): HTMLButtonElement {\n    const closeButton = document.createElement('button');\n\n    closeButton.setAttribute('title', closeLabel);\n    closeButton.appendChild(document.createTextNode(closeLabel));\n    closeButton.addEventListener('click', () => this.hide());\n\n    return closeButton;\n  }\n\n  getContainer({\n    containerClass,\n    containerElement,\n    root,\n  }: {\n    containerClass: string;\n    containerElement: string;\n    root: HTMLElement;\n  }): HTMLElement {\n    const existingContainer = root.querySelector(\n      `${containerElement}.${containerClass}`\n    );\n\n    if (existingContainer) {\n      return existingContainer as HTMLElement;\n    }\n\n    const container = document.createElement(containerElement);\n\n    container.classList.add(containerClass);\n    root.appendChild(container);\n\n    return container;\n  }\n\n  getElement(): HTMLElement {\n    return this.element;\n  }\n\n  /**\n   * Used to override the default settings for all instances.\n   *\n   * @param settings {MelbaOptions} See `defaults` for details.\n   */\n  static settings(settings: MelbaOptions): void {\n    Melba.defaults = {\n      ...Melba.defaults,\n      ...settings,\n    };\n  }\n}\n\nexport const toast = (content: string, options: MelbaOptions = {}): Melba =>\n  new Melba(content, {\n    ...options,\n    autoShow: true,\n  });\n\nexport const error = (content: string, options: MelbaOptions = {}): Melba =>\n  toast(content, {\n    ...options,\n    type: 'error',\n  });\n\nexport const info = (content: string, options: MelbaOptions = {}): Melba =>\n  toast(content, {\n    ...options,\n    type: 'info',\n  });\n\nexport const success = (content: string, options: MelbaOptions = {}): Melba =>\n  toast(content, {\n    ...options,\n    type: 'success',\n    hide: true,\n  });\n\nexport const warning = (content: string, options: MelbaOptions = {}): Melba =>\n  toast(content, {\n    ...options,\n    type: 'warning',\n  });\n\nexport default Melba;\n", "export type EventMap = {\n  [key: string]: any[];\n};\n\ntype Handler<A extends any[]> = (...args: A) => void;\n\ntype HandlerStack<E extends EventMap> = {\n  [K in keyof E]?: Handler<E[K]>[];\n};\n\nexport interface ITypedEventEmitter<\n  T extends EventMap,\n  E extends EventMap = T & EventMap\n> {\n  on<K extends keyof E>(event: K, handler: Handler<E[K]>): void;\n  once<K extends keyof E>(event: K, handler: Handler<E[K]>): void;\n  off<K extends keyof E>(event: K, handler: Handler<E[K]>): void;\n  emit<K extends keyof E>(event: K, ...args: E[K]): void;\n}\n\nexport class EventEmitter<\n  T extends EventMap = EventMap,\n  E extends EventMap = T & EventMap\n> implements ITypedEventEmitter<E>\n{\n  #handlers: HandlerStack<E> = {};\n\n  public on<K extends keyof E>(event: K, handler: Handler<E[K]>): void {\n    if (!(event in this.#handlers)) {\n      this.#handlers[event] = [];\n    }\n\n    this.#handlers[event]!.push(handler);\n  }\n\n  public once<K extends keyof E>(event: K, handler: Handler<E[K]>): void {\n    const onceHandler: Handler<E[K]> = (...args) => {\n      handler(...args);\n\n      this.off(event, onceHandler);\n    };\n\n    this.on(event, onceHandler);\n  }\n\n  public off<K extends keyof E>(event: K, handler: Handler<E[K]>): void {\n    if (!(event in this.#handlers)) {\n      return;\n    }\n\n    const index = this.#handlers[event]!.indexOf(handler);\n\n    if (index === -1) {\n      return;\n    }\n\n    this.#handlers[event]!.splice(index, 1);\n  }\n\n  public emit<K extends keyof E>(event: K, ...args: E[K]): void {\n    if (!(event in this.#handlers)) {\n      return;\n    }\n\n    this.#handlers[event]!.forEach((handler) => handler(...args));\n  }\n}\n\nexport default EventEmitter;\n", "export const supportsFocusWithin: boolean = (() => {\n  try {\n    document.querySelector(':focus-within');\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n})();\n\nexport default supportsFocusWithin;\n"],
  "mappings": "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",
  "names": ["Melba_exports", "__export", "Melba", "Melba_default", "error", "info", "success", "toast", "warning", "__toCommonJS", "EventEmitter", "#handlers", "event", "handler", "onceHandler", "args", "index", "EventEmitter_default", "supportsFocusWithin", "e", "supportsFocusWithin_default", "_Melba", "EventEmitter_default", "content", "animation", "animationDuration", "closeLabel", "container", "containerClass", "containerElement", "events", "hide", "root", "toastClass", "toastElement", "toastHideClass", "toastShowClass", "type", "event", "force", "focusSelector", "supportsFocusWithin_default", "transitionEndHandler", "transitionStartHandler", "bound", "mouseOverHandler", "closeButton", "existingContainer", "settings", "__spreadValues", "Melba", "toast", "options", "__spreadProps", "error", "info", "success", "warning", "Melba_default"]
}
